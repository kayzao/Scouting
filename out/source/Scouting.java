/* autogenerated by Processing revision 1282 on 2022-10-10 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Scouting extends PApplet {

char[] keyBinds = { 'a', 's', 'd', 'f', //keybinds for auto hits/misses and teleop hits/misses
                    'j', 'k', 'l', ';'};
String[] names = {"HIGH HIT", "HIGH MISS", "LOW HIT", "LOW MISS"};
char mostRecentUpdatedBind = 'z'; //keybind to remove 1 from the button last updated
int mostRecentUpdated = -1;
int mostRecentTime = 0;

Button resetButton;
Button[] buttons = new Button[8];

int autoColor = color(50, 255, 100);
int teleColor = color(0, 255, 255);

boolean start = false; //To prevent the kb's inputs from not registering

 public void setup(){
  //fullScreen();
  /* size commented out by preprocessor */;
  frameRate(240);
  
  int padding = 45;
  int x = padding;
  int y = padding;
  int w = (width - 5 * padding) / 4;
  int h = (height - 3 * padding) / 2;
  for(int i = 0; i < buttons.length; i++){
    if(i == 4){
      x = padding;
      y += h + padding;
    }
    buttons[i] = new Button(x, y, w, h, keyBinds[i], true);
    buttons[i].setName(names[i % 4]);
    if(i < 4) buttons[i].fillColor = autoColor;
    x += w + padding;
  }
  
  resetButton = new Button(width / 2 - 30, height - 45, 60, 40, '`', true);
  resetButton.fillColor = color(255, 0, 0);
  resetButton.showBorder = false;
  resetButton.name = "RESET";
  resetButton.showCount = false;
  /*
  test = new Button(100, 100, 300, 300, 'a');
  test.setName("TEST");
  */
}

 public void draw(){
  background(220);
  for(int i = 0; i < buttons.length; i++){
    if(buttons[i].getLastUpdated() > mostRecentTime){
      mostRecentUpdated = i;
      mostRecentTime = buttons[i].getLastUpdated();
    }
    if(start){
      buttons[i].disCheckAll();
    } else {
      buttons[i].display();
    }
  }
  if(start){
    resetButton.disCheckAll();
  }
  
  if(resetButton.getCounter() > 0){
    setup();
  }
  
  fill(0);
  textSize(50);
  textAlign(CENTER);
  text("AUTONOMOUS PERIOD", width / 2, 35);
  text("TELE-OPERATED PERIOD", width / 2, height / 2 + 20);
  text("!!!FOCUS WINDOW!!!", 250, height - 10);
  /*
  test.display();
  test.checkPress();
  test.checkKBPress();*/
  
  
  
  if(!start){
    fill(0, 0, 0, 100);
    rect(0, 0, width, height);
    fill(255);
    textSize(140);
    textAlign(CENTER);
    text("Press SPACE to start", width / 2, height / 2 );
  }
  
  fill(255, 0, 0);
  textSize(20);
  textAlign(RIGHT);
  text(frameRate, width - 5, height - 5);
}

 public void keyReleased(){
  //println(key + " " + frameCount);
  if(!start && key == ' ') start = true;
  if(key == mostRecentUpdatedBind){
    buttons[mostRecentUpdated].decrementCounter();
  }
  for(int i = 0; i < buttons.length; i++){
    if(buttons[i].getKey() == key){
      buttons[i].incrementCounter();
      buttons[i].lastUpdate = millis();
    }
  }
  if(resetButton.getKey() == key) resetButton.incrementCounter();
}
class Button{
  private int x, y, w, h, counter, mButton;
  private String name = "";
  private char inKey;
  final int pressOffset = 40;
  int textSize, rounding, lastUpdate;
  int fillColor = teleColor;
  int textColor = color(0);
  boolean isPressed, kbPressed, helpMode, showCount, showBorder;
  
  public Button(int x, int y, int w, int h, char inKey, boolean enableHelp){
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    counter = 0;
    this.inKey = inKey;
    textSize = PApplet.parseInt(w / 4.5f);
    lastUpdate = millis();
    helpMode = enableHelp;
    showCount = true;
    showBorder = true;
    kbPressed = false;
  }
  
  public void setName(String name){
    this.name = name;
  }
  
  public void disCheckAll(){
    checkPress();
    //checkKBPress();
    display();
    
  }
  
  public void display(){
    rectMode(CORNER);
    if(showBorder){
      strokeWeight(3);
      stroke(255);
    } else {
      noStroke();
    }
    
    fill(fillColor);
    rect(x, y, w, h, rounding);
    fill(textColor);
    textSize(textSize);
    if(showCount){
      textAlign(RIGHT);
      text(counter, x + (w * 0.9f), y + (h * 0.9f));
    }
    textAlign(CENTER);
    text(name, x + 0.5f * w, y + 0.25f * h);
    fill(255, 100, 100);
    text(inKey, x + 0.5f * w, y + 0.5f * h);
    textAlign(LEFT);
    
    
    if(isPressed || kbPressed){
      fill(255, 255, 255, 120);
      rect(x, y, w, h, rounding);
    }
  }
  
  public void checkPress(){
    if(mousePressed && (mouseX > x && mouseX < x + w) && (mouseY > y && mouseY < y + h)){
      if(!isPressed) isPressed = true;
      if(mouseButton == LEFT){
        mButton = 1;
      } else if(mouseButton == RIGHT){
        mButton = 2;
      }
    } else {
      if(isPressed){
        isPressed = false;
        if(mButton != 0){
          if(mButton == 1) counter++;
          if(mButton == 2) counter = max(0, --counter);
        } else {
          counter++;
        }
        mButton = 0;
        lastUpdate = millis();
      }
    }
  }
  
  public void checkKBPress(){
    //println(isPressed);
    if(keyPressed){
      //println(key + " " + frameCount + " " + isPressed);
      if(!kbPressed && key == inKey){
        kbPressed = true;
      }
    } else {
      if(kbPressed){
        kbPressed = false;
        counter++;
        lastUpdate = millis();
      }
    }
  }
  
  public int getCounter(){
    return counter;
  }
  
  public void decrementCounter(){
    counter = max(0, --counter);
  }
  
  public void incrementCounter(){
    counter++;
  }
  
  public int getLastUpdated(){
    return lastUpdate;
  }
  
  public char getKey(){
    return inKey;
  }
}


  public void settings() { size(1200, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Scouting" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
